<?php

# List of Emvicy Standard Events
# @see https://emvicy.com/1.x/events#EmvicyStandardEvents


\MVC\Event::processBindConfigStack([

    /**
     * on Input (PUT, POST, etc.)
     */
    'DTRequestIn.set_input.before' => [

        /**
         * sanitize input
         * following asset filter rules
         */
        function(\MVC\DataType\DTValue $oDTValue) {

            // detect incoming type of input
            $sTypeIncoming = gettype($oDTValue->get_mValue());

            // we need array...
            ('string' === $sTypeIncoming && false === \MVC\Strings::isJson($oDTValue->get_mValue()))
                ? parse_str($oDTValue->get_mValue(), $aInput)
                : $aInput = $oDTValue->get_mValue()
            ;

            $bAnyFilterHasTakenAffect = false;

            if (true === is_array($aInput))
            {
                foreach ($aInput as $sKey => $sInput)
                {
                    $aSet = \MVC\Asset::init()->get('Filter.Request.input.' . $sKey);

                    if (true === empty($aSet))
                    {
                        continue;
                    }

                    // sanitize_var
                    if (true === is_int(($aSet['sanitize_var'] ?? null)))
                    {
                        $aInput[$sKey] = filter_var($aInput[$sKey], ($aSet['sanitize_var'] ?? null));
                    }
                    elseif(true === is_array(($aSet['sanitize_var'] ?? null)))
                    {
                        foreach (($aSet['sanitize_var'] ?? []) as $iSanitizeVar)
                        {
                            $aInput[$sKey] = filter_var($aInput[$sKey], $iSanitizeVar);
                        }
                    }

                    // preg_replace
                    if (true === is_int(($aSet['preg_replace'] ?? null)))
                    {
                        $aInput[$sKey] = filter_var($aInput[$sKey], ($aSet['preg_replace'] ?? null));
                    }
                    elseif(true === is_array(($aSet['preg_replace'] ?? null)))
                    {
                        foreach (($aSet['preg_replace'] ?? []) as $sRegEx)
                        {
                            $aInput[$sKey] = filter_var($aInput[$sKey], $sRegEx);
                        }
                    }

                    // cast
                    $sCast = ($aSet['cast'] ?? null);
                    ('int' === $sCast) ? $aInput[$sKey] = (int) $aInput[$sKey] : false;
                    ('string' === $sCast) ? $aInput[$sKey] = (string) $aInput[$sKey] : false;
                    ('bool' === $sCast) ? $aInput[$sKey] = (boolean) $aInput[$sKey] : false;
                    ('float' === $sCast) ? $aInput[$sKey] = (float) $aInput[$sKey] : false;
                    ('array' === $sCast) ? $aInput[$sKey] = (array) $aInput[$sKey] : false;

                    $bAnyFilterHasTakenAffect = true;
                }

                if (true === $bAnyFilterHasTakenAffect)
                {
                    // ...if incoming type was string, convert back
                    ('string' === $sTypeIncoming && false === \MVC\Strings::isJson($oDTValue->get_mValue())) ? $aInput = http_build_query($aInput) : false;

                    // save array back
                    $oDTValue->set_mValue($aInput);
                }
            }
        },
    ],
]);
